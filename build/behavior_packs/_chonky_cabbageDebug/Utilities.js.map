{"version":3,"sources":["Utilities.ts"],"names":[],"mappings":"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","file":"../chonky_cabbage/scripts/Utilities.js","sourcesContent":["import {world, BlockPermutation, Vector3, Vector2 } from \"@minecraft/server\";\r\nimport Debug from \"./Debug\";\r\n\r\nexport default class Utilities {\r\n\r\n  // creates a road of the provided length and block type\r\n  // starting at the coordinates specified and at the view angle provided\r\n  static makeSimpleRoad(\r\n    blockPerm:BlockPermutation,\r\n    length: number,\r\n    width: number,\r\n    coord: Vector3,\r\n    viewDirection: Vector3\r\n  )\r\n  {\r\n    // we use this to determine where to start the left border of the road\r\n    let halfWidth = Math.ceil(width / 2);\r\n\r\n    // we use this to determine whether the player is looking more Xward or Zward\r\n    // which determines which dimension the road width applies to\r\n    let dirMultiplier = (Math.abs(coord.x) > Math.abs(coord.z)) ?\r\n      {x: 0, y: 1, z: 1} :\r\n      {x: 1, y: 1, z: 0};\r\n\r\n    for(var i = 0; i < length; i++)\r\n    {\r\n      for(var w = -halfWidth; w < halfWidth; w++)\r\n      {\r\n        let currentCoord = {\r\n          x: Math.round(coord.x + (viewDirection.x * i)) + (w * dirMultiplier.x),\r\n          y: coord.y,\r\n          z: Math.round(coord.z + (viewDirection.z * i)) + (w * dirMultiplier.z)\r\n        };\r\n        this.setBlock(blockPerm, currentCoord);\r\n      }\r\n    }\r\n  }\r\n\r\n  \r\n  // converts a view direction as an arbitrary 2d angle, into an angle that aligns\r\n  // with the nearest cardinal coordinate\r\n  static getViewDirectionAsCardinalClampedRadians(viewDirection: Vector3): number\r\n  {\r\n    const halfPi = Math.PI / 2;\r\n    let viewAngle2d:number = Math.atan2(viewDirection.z, viewDirection.x);\r\n    let cardinalDirection:number = Math.round(viewAngle2d / halfPi);\r\n    let clampedAngle = cardinalDirection * halfPi;\r\n\r\n    Debug.debug(`Clamped ${Debug.toDegrees(viewAngle2d)} to ${Debug.toDegrees(clampedAngle)}.`);\r\n\r\n    return clampedAngle;\r\n  }\r\n\r\n  // makes a pretty road starting at \"coord\", extending \"length\" and in the\r\n  // nearest straight direction\r\n  static makeRoad(coord: Vector3, viewDirection: Vector3, length: number)\r\n  {\r\n    Debug.debug(`Starting ${length} road at ${Debug.printCoordinate3(coord)}.`);\r\n    \r\n    // define our road blocks\r\n    const foundation = BlockPermutation.resolve(\"minecraft:cobblestone\");\r\n    const wall = BlockPermutation.resolve(\"minecraft:cobblestone_wall\");\r\n    const path = BlockPermutation.resolve(\"minecraft:bamboo_planks\");\r\n    const post = BlockPermutation.resolve(\"minecraft:bamboo_fence\");\r\n    const light = BlockPermutation.resolve(\"minecraft:lantern\");\r\n\r\n    // get an angle that is clamped to cardinal directions\r\n    let angle = this.getViewDirectionAsCardinalClampedRadians(viewDirection);\r\n    let direction = {x: Math.cos(angle), y:1, z:Math.sin(angle)};\r\n\r\n    Debug.debug(`Got matrix: ${Debug.printCoordinate3(direction)}`);\r\n\r\n    // walk the path length\r\n    for(let i = 0; i < length; i++)\r\n    {\r\n      // left wall foundation\r\n      this.setBlock(foundation, {\r\n        x: coord.x + (direction.x * i) + (direction.z * 2),\r\n        y: coord.y,\r\n        z: coord.z + (direction.z * i) - (direction.x * 0)\r\n      });\r\n\r\n      // left wall\r\n      this.setBlock(wall, {\r\n        x: coord.x + (direction.x * i) + (direction.z * 2),\r\n        y: coord.y + 1,\r\n        z: coord.z + (direction.z * i) - (direction.x * 0)\r\n      });\r\n      \r\n      // left path block\r\n      this.setBlock(path, {\r\n        x: coord.x + (direction.x * i) + (direction.z * 1),\r\n        y: coord.y,\r\n        z: coord.z + (direction.z * i) - (direction.x * 0)\r\n      });\r\n\r\n      // center path block\r\n      this.setBlock(path, {\r\n        x: coord.x + (direction.x * i) + (direction.z * 0),\r\n        y: coord.y,\r\n        z: coord.z + (direction.z * i) - (direction.x * 0)\r\n      });\r\n\r\n      // right path block\r\n      this.setBlock(path, {\r\n        x: coord.x + (direction.x * i) + (direction.z * -1),\r\n        y: coord.y,\r\n        z: coord.z + (direction.z * i) - (direction.x * 0)\r\n      });\r\n\r\n      // right wall foundation\r\n      this.setBlock(foundation, {\r\n        x: coord.x + (direction.x * i) + (direction.z * -2),\r\n        y: coord.y,\r\n        z: coord.z + (direction.z * i) - (direction.x * 0)\r\n      });\r\n\r\n      // right wall\r\n      this.setBlock(wall, {\r\n        x: coord.x + (direction.x * i) + (direction.z * -2),\r\n        y: coord.y + 1,\r\n        z: coord.z + (direction.z * i) - (direction.x * 0)\r\n      });\r\n\r\n      // every 8 blocks, place light posts\r\n      if(i % 8 == 0)\r\n      {\r\n        // left posts and light\r\n        this.setBlock(post, {\r\n          x: coord.x + (direction.x * i) + (direction.z * 2),\r\n          y: coord.y + 2,\r\n          z: coord.z + (direction.z * i) - (direction.x * 0)\r\n        });\r\n        this.setBlock(post, {\r\n          x: coord.x + (direction.x * i) + (direction.z * 2),\r\n          y: coord.y + 3,\r\n          z: coord.z + (direction.z * i) - (direction.x * 0)\r\n        });\r\n        this.setBlock(light, {\r\n          x: coord.x + (direction.x * i) + (direction.z * 2),\r\n          y: coord.y + 4,\r\n          z: coord.z + (direction.z * i) - (direction.x * 0)\r\n        });\r\n\r\n        // right posts and light\r\n        this.setBlock(post, {\r\n          x: coord.x + (direction.x * i) + (direction.z * -2),\r\n          y: coord.y + 2,\r\n          z: coord.z + (direction.z * i) - (direction.x * 0)\r\n        });\r\n        this.setBlock(post, {\r\n          x: coord.x + (direction.x * i) + (direction.z * -2),\r\n          y: coord.y + 3,\r\n          z: coord.z + (direction.z * i) - (direction.x * 0)\r\n        });\r\n        this.setBlock(light, {\r\n          x: coord.x + (direction.x * i) + (direction.z * -2),\r\n          y: coord.y + 4,\r\n          z: coord.z + (direction.z * i) - (direction.x * 0)\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  static get2dPositionOffsetFromAngle(offset: Vector3, angle:number)\r\n  {\r\n    return {\r\n      x: Math.round(Math.cos(angle) * offset.x),\r\n      y: 1,\r\n      z: Math.round(Math.sin(angle) * offset.z)\r\n    };\r\n  }\r\n\r\n  static multiplyVector3(vec: Vector3, multiplier: number): Vector3\r\n  {\r\n    return {\r\n      x:vec.x*multiplier,\r\n      y:vec.y*multiplier,\r\n      z:vec.z*multiplier};\r\n  }\r\n\r\n  // sets the block at the provided coordinates to the provided permutation\r\n  static setBlock(\r\n    blockPerm:BlockPermutation,\r\n    coord:Vector3\r\n  ) {\r\n    Debug.debug(`Setting block at ${Debug.printCoordinate3(coord)}.`);\r\n    const overworld = world.getDimension(\"overworld\");\r\n    overworld.getBlock(coord)?.setPermutation(blockPerm);\r\n  }\r\n}"],"sourceRoot":"../../../scripts/"}