{"version":3,"sources":["RoadMaker.ts"],"names":[],"mappings":"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","file":"../chonky_cabbage/scripts/RoadMaker.js","sourcesContent":["import {world, BlockPermutation, Vector3, Vector2 } from \"@minecraft/server\";\r\nimport Debug from \"./Debug\";\r\n\r\nexport default class RoadMaker {\r\n\r\n  public Dimension =   \"overworld\";\r\n  public Air =         BlockPermutation.resolve(\"minecraft:air\");\r\n  public Foundation =  BlockPermutation.resolve(\"minecraft:cobblestone\");\r\n  public Wall =        BlockPermutation.resolve(\"minecraft:cobblestone_wall\");\r\n  public Path =        BlockPermutation.resolve(\"minecraft:bamboo_planks\");\r\n  public Post =        BlockPermutation.resolve(\"minecraft:bamboo_fence\");\r\n  public Light =       BlockPermutation.resolve(\"minecraft:lantern\");\r\n\r\n  private blockInts:Array<BlockPermutation> =[\r\n    this.Air,         //0\r\n    this.Foundation,  //1\r\n    this.Wall,        //2\r\n    this.Path,        //3\r\n    this.Post,        //4\r\n    this.Light        //5\r\n  ]\r\n\r\n  private RoadNormal:Array<number> = [\r\n    0,0,0,0,0,\r\n    0,0,0,0,0,\r\n    0,0,0,0,0,\r\n    2,0,0,0,2,\r\n    1,3,3,3,1];\r\n\r\n  private RoadNormalLit:Array<number> = [\r\n    5,0,0,0,5,\r\n    4,0,0,0,4,\r\n    4,0,0,0,4,\r\n    1,0,0,0,1,\r\n    1,3,3,3,1];\r\n  \r\n  private RoadTunnel:Array<number> = [\r\n    1,3,3,3,1,\r\n    1,0,0,0,1,\r\n    1,0,0,0,1,\r\n    1,0,0,0,1,\r\n    1,3,3,3,1];\r\n\r\n  private RoadTunnelLit:Array<number> = [\r\n    1,3,3,3,1,\r\n    1,0,0,0,1,\r\n    5,0,0,0,5,\r\n    1,0,0,0,1,\r\n    1,3,3,3,1];\r\n\r\n  renderSlice(sliceTemplate: Array<number>, coord:Vector3, cardinalDirection: number)\r\n  {\r\n    const rowOffset = 4;\r\n    const colOffset = -2;\r\n\r\n    Debug.debug(`Rendering slice at ${Debug.printCoordinate3(coord)}`);\r\n\r\n    // loop through each row in the slice template,\r\n    // we start at 5 above the starting coord and loop\r\n    // in reverse so we render the slice from the top\r\n    // left\r\n    for(let row = 0; row < 5; row++)\r\n    {\r\n      // loop through each column in this row,\r\n      // we start at -2 so that we start rendering\r\n      // blocks to the left of the starting coord\r\n      // and center the slice at the bottom center block\r\n      for(let col = 0; col < 5; col++)\r\n      {\r\n        // get the block int from the slice template\r\n        var blockIndex = sliceTemplate[(row * 5) + col];\r\n\r\n        // resolve the block type based on the int\r\n        var block = this.blockInts[blockIndex];\r\n\r\n        // transform our slice based on the cardinal direction\r\n        switch(cardinalDirection)\r\n        {\r\n          case 0: // west\r\n            this.setBlock(block, {\r\n              x: coord.x,\r\n              y: coord.y + (rowOffset - row),\r\n              z: coord.z + (colOffset + col)\r\n            });\r\n            break;\r\n          case 1: // south\r\n            this.setBlock(block, {\r\n              x: coord.x + (colOffset + col),\r\n              y: coord.y + (rowOffset - row),\r\n              z: coord.z\r\n            });\r\n            break;\r\n          case 2: // east\r\n            this.setBlock(block, {\r\n              x: coord.x,\r\n              y: coord.y + (rowOffset - row),\r\n              z: coord.z - (colOffset + col)\r\n            });\r\n            break;\r\n          case 3: // north\r\n            this.setBlock(block, {\r\n              x: coord.x - (colOffset + col),\r\n              y: coord.y + (rowOffset - row),\r\n              z: coord.z\r\n            });\r\n            break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  createRoad(startCoord: Vector3, viewDirection: Vector3, length: number)\r\n  {\r\n    Debug.debug(`Starting ${length} road at ${Debug.printCoordinate3(startCoord)}.`)\r\n\r\n    // round our look angle to a cardinal direction, expressed as an integer where 0 = East\r\n    const cardinalInt = RoadMaker.getCardinalInteger(viewDirection);\r\n\r\n    Debug.debug(`Our cardinal integer is: ${cardinalInt}`);\r\n\r\n    // copy our provided vector into an object we can walk through\r\n    let walkingCoord = {\r\n      x: startCoord.x,\r\n      y: startCoord.y,\r\n      z: startCoord.z\r\n    };\r\n\r\n    // loop through our length, creating strips of road depending on our cardinal alignment\r\n    // we are 1 indexed so the road starts just in front of the player, otherwise it\r\n    // won't render correctly\r\n    for(let i = 1; i <= length; i++)\r\n    {\r\n      let drawLights = i % 8 === 0;\r\n      let drawSupports = i % 16 === 0;\r\n\r\n      // dynamically set our length-walking coordinate\r\n      let coordToChange: keyof Vector3 = cardinalInt % 2 == 0 ? \"x\" : \"z\";\r\n      let directionModifier = cardinalInt > 1 ? -1 : 1;\r\n      walkingCoord[coordToChange] = startCoord[coordToChange] + (i * directionModifier);\r\n\r\n      // resolve our slice template\r\n      let sliceTemplate = drawLights ? this.RoadNormalLit : this.RoadNormal;\r\n\r\n      // figure out if we should be tunneling\r\n      if(this.getBlock({x: walkingCoord.x, y: walkingCoord.y + 4, z: walkingCoord.z})?.permutation !== this.Air)\r\n      {\r\n        sliceTemplate = drawLights ? this.RoadTunnelLit : this.RoadTunnel;\r\n      }\r\n\r\n      // figure out if we are floating and need supports\r\n      let supportY = {x: walkingCoord.x, y: walkingCoord.y - 1, z: walkingCoord.z}\r\n      while(drawSupports && this.getBlock(supportY)?.permutation === this.Air)\r\n      {\r\n        this.setBlock(this.Foundation, supportY);\r\n        supportY.y -= 1;\r\n      }\r\n\r\n      // render our road\r\n      this.renderSlice(sliceTemplate, walkingCoord, cardinalInt);\r\n    }\r\n  }\r\n\r\n  // sets the block at the provided coordinates to the provided permutation\r\n  setBlock(blockPerm:BlockPermutation, coord:Vector3) {\r\n    Debug.trace(`Setting block at ${Debug.printCoordinate3(coord)}.`);\r\n    this.getBlock(coord)?.setPermutation(blockPerm);\r\n  }\r\n\r\n  // gets the block at the provided coordinates\r\n  getBlock(coord: Vector3)\r\n  {\r\n    const overworld = world.getDimension(this.Dimension);\r\n    return overworld.getBlock(coord)\r\n  }\r\n\r\n  // gets a cardinally-aligned value expressed as an integer where\r\n  // 0 = West\r\n  // 1 = South\r\n  // 2 = East\r\n  // 3 = North\r\n  static getCardinalInteger(viewDirection:Vector3): number\r\n  {\r\n    // figure out our 2d look angle\r\n    let lookAngle2d = Math.atan2(viewDirection.z, viewDirection.x);\r\n\r\n    // regulate our angle so it's positive\r\n    while(lookAngle2d < 0)\r\n    {\r\n      lookAngle2d += (Math.PI * 2);\r\n    }\r\n\r\n    // clamp our look angle to a cardinal coordinate\r\n    let cardinal = Math.round(lookAngle2d / (Math.PI / 2));\r\n\r\n    // clamp our look angle to 0 - 3\r\n    cardinal = cardinal > 3 ? 0 : cardinal;\r\n\r\n    return cardinal;\r\n  }\r\n}"],"sourceRoot":"../../../scripts/"}