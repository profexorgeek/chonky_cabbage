{"version":3,"sources":["RoadMaker.ts"],"names":[],"mappings":"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","file":"../chonky_cabbage/scripts/RoadMaker.js","sourcesContent":["import { world, BlockPermutation, Vector3, Vector2, Block } from \"@minecraft/server\";\r\nimport Debug from \"./Debug\";\r\n\r\nexport enum WorkType {\r\n  None,\r\n  Road,\r\n  Rail,\r\n  StairsUp,\r\n  StairsDown,\r\n  RailUp,\r\n  RailDown,\r\n  CornerLeft,\r\n  CornerRight,\r\n  TeeLeft,\r\n  TeeRight,\r\n  Intersection,\r\n}\r\n\r\n// For block definitions, see:\r\n// https://www.npmjs.com/package/@minecraft/vanilla-data?activeTab=code\r\nexport default class RoadMaker {\r\n  // these fields are used to keep track\r\n  // of where we are in the current work\r\n  // queue, allowing us to do long-running\r\n  // work across multiple ticks\r\n  private qInProgress: boolean = false;\r\n  private qStartCoord: Vector3 = { x: 0, y: 0, z: 0 };\r\n  private qCurrentCoord: Vector3 = { x: 0, y: 0, z: 0 };\r\n  private qViewDir: Vector3 = { x: 0, y: 0, z: 0 };\r\n  private qIteration: number = 0;\r\n  private qLength: number = 0;\r\n  private qCardinal: number = 0;\r\n  private qWorkType: WorkType = WorkType.None;\r\n\r\n  private SlicesPerTick: number = 2;\r\n  private MaxBridgeSupportHeight: number = 64;\r\n  private StairDirectionStateName: string = \"weirdo_direction\";\r\n  private DistanceBetweenLights: number = 8;\r\n  private DistanceBetweenSupports: number = 16;\r\n  private DistanceBetweenFancy: number = 16;\r\n\r\n  // these properties allow implementations to specify the specific\r\n  // road style\r\n  public Dimension = \"overworld\";\r\n  public Air =              BlockPermutation.resolve(\"minecraft:air\");\r\n  public Dirt =             BlockPermutation.resolve(\"minecraft:dirt\");\r\n  public Foundation =       BlockPermutation.resolve(\"minecraft:cobblestone\");\r\n  public Wall =             BlockPermutation.resolve(\"minecraft:cobblestone_wall\");\r\n  public Path =             BlockPermutation.resolve(\"minecraft:bamboo_planks\");\r\n  public Post =             BlockPermutation.resolve(\"minecraft:bamboo_fence\");\r\n  public Light =            BlockPermutation.resolve(\"minecraft:lantern\");\r\n  public Stair =            BlockPermutation.resolve(\"minecraft:bamboo_stairs\");\r\n  public Rail =             BlockPermutation.resolve(\"minecraft:rail\");\r\n  public GoldenRail =       BlockPermutation.resolve(\"minecraft:golden_rail\");\r\n  public RedTorch =         BlockPermutation.resolve(\"minecraft:redstone_torch\");\r\n\r\n  // this maps block types to an integer index, allowing easy\r\n  // creation of visual templates\r\n  private blockInts: Array<BlockPermutation> = [\r\n    this.Air, //0\r\n    this.Foundation, //1\r\n    this.Wall, //2\r\n    this.Path, //3\r\n    this.Post, //4\r\n    this.Light, //5\r\n    this.Stair, //6\r\n    this.Rail, //7\r\n    this.GoldenRail, //8\r\n    this.RedTorch, //9\r\n  ];\r\n\r\n  // converts my cardinal directions into stair cardinal\r\n  // directions\r\n  private stairCardinalConversion: Array<number> = [\r\n    0, // cardinal west 0 = stair west 0\r\n    2, // cardinal south 1 = stair south 3\r\n    1, // cardinal east 2 = stair east 1\r\n    3, // cardinal north 3 = stair north 2\r\n  ];\r\n\r\n  // these are template 5x5 \"slices\" of a type of road. These use the\r\n  // int list above to resolve blocks when rendering the slice\r\n  private RoadNormal: Array<number> = [\r\n    0, 0, 0, 0, 0, \r\n    0, 0, 0, 0, 0, \r\n    0, 0, 0, 0, 0, \r\n    2, 0, 0, 0, 2, \r\n    1, 3, 3, 3, 1];\r\n\r\n  private RoadNormalLit: Array<number> = [\r\n    0, 0, 0, 0, 0, \r\n    0, 0, 0, 0, 0, \r\n    5, 0, 0, 0, 5, \r\n    2, 0, 0, 0, 2, \r\n    1, 3, 3, 3, 1];\r\n\r\n  private RoadFancy: Array<number> = [\r\n    5, 0, 0, 0, 5, \r\n    4, 0, 0, 0, 4, \r\n    4, 0, 0, 0, 4, \r\n    2, 0, 0, 0, 2, \r\n    1, 3, 3, 3, 1];\r\n\r\n  private RoadTunnel: Array<number> = [\r\n    1, 3, 3, 3, 1,\r\n    1, 0, 0, 0, 1, \r\n    1, 0, 0, 0, 1, \r\n    1, 0, 0, 0, 1, \r\n    1, 3, 3, 3, 1];\r\n\r\n  private RoadTunnelLit: Array<number> = [\r\n    1, 3, 3, 3, 1, \r\n    3, 0, 0, 0, 3, \r\n    5, 0, 0, 0, 5, \r\n    3, 0, 0, 0, 3, \r\n    1, 3, 3, 3, 1];\r\n\r\n  private RoadTunnelFancy: Array<number> = [\r\n    1, 1, 1, 1, 1, \r\n    1, 0, 0, 0, 1, \r\n    5, 0, 0, 0, 5,\r\n    1, 0, 0, 0, 1, \r\n    1, 1, 1, 1, 1];\r\n\r\n  private RoadStairNormal: Array<number> = [\r\n    0, 0, 0, 0, 0, \r\n    0, 0, 0, 0, 0, \r\n    2, 0, 0, 0, 2, \r\n    1, 6, 6, 6, 1, \r\n    1, 1, 1, 1, 1];\r\n\r\n  private RoadStairLit: Array<number> = [\r\n    5, 0, 0, 0, 5, \r\n    4, 0, 0, 0, 4,\r\n    2, 0, 0, 0, 2, \r\n    1, 6, 6, 6, 1, \r\n    1, 1, 1, 1, 1];\r\n\r\n  private RailNormal: Array<number> = [\r\n    0, 0, 0, 0, 0, \r\n    0, 0, 0, 0, 0, \r\n    0, 0, 0, 0, 0, \r\n    2, 0, 8, 0, 2, \r\n    1, 3, 3, 3, 1];\r\n\r\n  private RailLit: Array<number> = [\r\n    0, 0, 0, 0, 0, \r\n    0, 0, 0, 0, 0, \r\n    5, 0, 0, 0, 5, \r\n    2, 0, 8, 9, 2, \r\n    1, 3, 3, 3, 1];\r\n\r\n  private RailFancy: Array<number> = [\r\n    5, 0, 0, 0, 5, \r\n    4, 0, 0, 0, 4, \r\n    4, 0, 0, 0, 4, \r\n    2, 0, 8, 9, 2, \r\n    1, 3, 3, 3, 1];\r\n  \r\n  private RailTunnel: Array<number> = [\r\n    1, 3, 3, 3, 1,\r\n    1, 0, 0, 0, 1, \r\n    1, 0, 0, 0, 1, \r\n    1, 0, 8, 0, 1, \r\n    1, 3, 3, 3, 1];\r\n\r\n  private RailTunnelLit: Array<number> = [\r\n    1, 3, 3, 3, 1, \r\n    3, 0, 0, 0, 3, \r\n    5, 0, 0, 0, 5, \r\n    3, 0, 8, 9, 3, \r\n    1, 3, 3, 3, 1];\r\n\r\n  private RailTunnelFancy: Array<number> = [\r\n    1, 1, 1, 1, 1, \r\n    1, 0, 0, 0, 1, \r\n    5, 0, 0, 0, 5,\r\n    1, 0, 8, 9, 1, \r\n    1, 1, 1, 1, 1];\r\n\r\n    private RailStairNormal: Array<number> = [\r\n      0, 0, 0, 0, 0, \r\n      0, 0, 0, 0, 0, \r\n      2, 0, 0, 0, 2, \r\n      1, 6, 8, 0, 1, \r\n      1, 1, 1, 1, 1];\r\n  \r\n    private RailStairLit: Array<number> = [\r\n      5, 0, 0, 0, 5, \r\n      4, 0, 0, 0, 4,\r\n      2, 0, 0, 0, 2, \r\n      1, 6, 8, 9, 1, \r\n      1, 1, 1, 1, 1];\r\n\r\n  constructor() {\r\n    Debug.debug(\"RoadMaker has been created...\");\r\n  }\r\n\r\n  // returns whether a road is being built\r\n  isRoadInProgress(): boolean {\r\n    return this.qInProgress;\r\n  }\r\n\r\n  // returns where the road building is occuring so progress\r\n  // can be traced\r\n  getWorkPoint(): Vector3 {\r\n    return this.qCurrentCoord;\r\n  }\r\n\r\n  cancelRoad() {\r\n    this.qInProgress = false;\r\n    this.qStartCoord = { x: 0, y: 0, z: 0 };\r\n    this.qCurrentCoord = { x: 0, y: 0, z: 0 };\r\n    this.qViewDir = { x: 0, y: 0, z: 0 };\r\n    this.qIteration = 0;\r\n    this.qLength = 0;\r\n    this.qCardinal = 0;\r\n    this.qWorkType = WorkType.None;\r\n  }\r\n\r\n  tryAssignBlockType(blockKey: string, blockType: string) {\r\n    try {\r\n      blockType = \"minecraft:\" + blockType;\r\n      let block = BlockPermutation.resolve(blockType);\r\n      switch (blockKey) {\r\n        case \"Foundation\":\r\n          this.Foundation = block;\r\n          break;\r\n        case \"Wall\":\r\n          this.Wall = block;\r\n          break;\r\n        case \"Path\":\r\n          this.Path = block;\r\n          break;\r\n        case \"Post\":\r\n          this.Post = block;\r\n          break;\r\n        case \"Light\":\r\n          this.Light = block;\r\n          break;\r\n        case \"Stair\":\r\n          this.Stair = block;\r\n          break;\r\n      }\r\n\r\n      // reset array\r\n      this.blockInts = [\r\n        this.Air, //0\r\n        this.Foundation, //1\r\n        this.Wall, //2\r\n        this.Path, //3\r\n        this.Post, //4\r\n        this.Light, //5\r\n        this.Stair, //6\r\n      ];\r\n      Debug.info(`Set ${blockKey} to ${blockType}`);\r\n    } catch (e) {\r\n      Debug.error(`Couldn't locate block type: ${blockType}`);\r\n      return;\r\n    }\r\n  }\r\n\r\n  // starts building a new road at the provided coordinates, in the provided view direction\r\n  // of the provided length.\r\n  startNewRoad(startCoord: Vector3, viewDirection: Vector3, length: number, type: WorkType = WorkType.Road) {\r\n    // EARLY OUT: road already in progress\r\n    if (this.qInProgress === true) {\r\n      Debug.warn(\"Cannot start a new road until the road in progress has completed.\");\r\n      return;\r\n    }\r\n\r\n    this.qInProgress = true;\r\n    this.qCardinal = RoadMaker.getCardinalInteger(viewDirection);\r\n    this.qIteration = 0;\r\n    this.qStartCoord = startCoord;\r\n    this.qViewDir = viewDirection;\r\n    this.qLength = length;\r\n    this.qWorkType = type;\r\n\r\n    // copy our provided vector into an object we can walk through\r\n    this.qCurrentCoord = {\r\n      x: startCoord.x,\r\n      y: startCoord.y,\r\n      z: startCoord.z,\r\n    };\r\n\r\n    Debug.debug(`Starting road(${length}) at ${Debug.printCoordinate3(startCoord)} and direction ${this.qCardinal}.`);\r\n  }\r\n\r\n  // builds a road segment for this tick, updates the inProgress status\r\n  // if the road has been completed\r\n  tryTickIteration() {\r\n    // EARLY OUT: nothing in progress\r\n    if (this.qInProgress === false) {\r\n      return;\r\n    }\r\n\r\n    Debug.debug(`Building road: ${this.qIteration}/${this.qLength}`);\r\n\r\n    let tickMaxIteration = this.qIteration + this.SlicesPerTick;\r\n    let thisTickEnd = Math.min(this.qLength, tickMaxIteration);\r\n\r\n    // loop through our length, creating strips of road depending on our cardinal alignment\r\n    // we are 1 indexed so the road starts just in front of the player, otherwise it\r\n    // won't render correctly\r\n    for (let i = this.qIteration + 1; i <= thisTickEnd; i++) {\r\n      switch (this.qWorkType) {\r\n        case WorkType.Road:\r\n          this.makeRoad(i, this.RoadNormal, this.RoadNormalLit, this.RoadFancy, this.RoadTunnel, this.RoadTunnelLit, this.RoadTunnelFancy);\r\n          break;\r\n        case WorkType.StairsUp:\r\n          this.makeStair(i, +1, this.RoadStairNormal, this.RoadStairLit);\r\n          break;\r\n        case WorkType.StairsDown:\r\n          this.makeStair(i, -1, this.RoadStairNormal, this.RoadStairLit);\r\n          break;\r\n        case WorkType.RailUp:\r\n          this.makeStair(i, +1, this.RailStairNormal, this.RailStairLit);\r\n          break;\r\n        case WorkType.RailDown:\r\n          this.makeStair(i, -1, this.RailStairNormal, this.RailStairLit);\r\n          break;\r\n        case WorkType.Rail:\r\n          this.makeRoad(i, this.RailNormal, this.RailLit, this.RailFancy, this.RailTunnel, this.RailTunnelLit, this.RailTunnelFancy);\r\n          break;\r\n      }\r\n    }\r\n\r\n    this.qIteration = thisTickEnd;\r\n    if (thisTickEnd == this.qLength) {\r\n      this.cancelRoad();\r\n    }\r\n  }\r\n\r\n  private makeStair(i: number, dir: number = +1, stairNormal:Array<number>, stairLit:Array<number>) {\r\n    let drawLights = i % 8 === 0;\r\n    let drawSupports = i % 16 === 0;\r\n\r\n    // dynamically set our length-walking coordinate\r\n    let coordToChange: keyof Vector3 = this.qCardinal % 2 == 0 ? \"x\" : \"z\";\r\n    let directionModifier = this.qCardinal > 1 ? -1 : 1;\r\n    this.qCurrentCoord[coordToChange] = this.qStartCoord[coordToChange] + i * directionModifier;\r\n\r\n    let sliceTemplate = drawLights ? stairLit : stairNormal;\r\n\r\n    if (dir > 0) {\r\n      this.renderSlice(sliceTemplate, this.qCurrentCoord, this.qCardinal, false);\r\n      this.qCurrentCoord.y++;\r\n    } else {\r\n      this.qCurrentCoord.y--;\r\n      this.renderSlice(sliceTemplate, this.qCurrentCoord, this.qCardinal, true);\r\n    }\r\n  }\r\n\r\n  private makeRoad(i: number, normalSlice:Array<number>, litSlice:Array<number>, fancySlice:Array<number>, normalTunnel:Array<number>, litTunnel:Array<number>, fancyTunnel:Array<number>) {\r\n    let drawLights = i % this.DistanceBetweenLights === 0;\r\n    let drawSupports = i % this.DistanceBetweenSupports === 0;\r\n    let drawFancy = i % this.DistanceBetweenFancy === 0;\r\n\r\n    // dynamically set our length-walking coordinate\r\n    let coordToChange: keyof Vector3 = this.qCardinal % 2 == 0 ? \"x\" : \"z\";\r\n    let directionModifier = this.qCardinal > 1 ? -1 : 1;\r\n    this.qCurrentCoord[coordToChange] = this.qStartCoord[coordToChange] + i * directionModifier;\r\n\r\n    // set our default slice type\r\n    let sliceTemplate = drawLights ? litSlice : normalSlice;\r\n    sliceTemplate = drawFancy ? fancySlice : sliceTemplate;\r\n\r\n    // if the top block is not air, we should tunnel\r\n    if (\r\n      this.getBlock({ x: this.qCurrentCoord.x, y: this.qCurrentCoord.y + 3, z: this.qCurrentCoord.z })?.permutation !==\r\n      this.Air\r\n    ) {\r\n      sliceTemplate = drawLights ? litTunnel : normalTunnel;\r\n      sliceTemplate = drawFancy ? fancyTunnel : sliceTemplate;\r\n    }\r\n\r\n    // generate supports\r\n    let supportY = { x: this.qCurrentCoord.x, y: this.qCurrentCoord.y - 1, z: this.qCurrentCoord.z };\r\n    let supportHeight = 0;\r\n    while (\r\n      drawSupports &&\r\n      this.getBlock(supportY)?.permutation !== this.Dirt &&\r\n      supportHeight < this.MaxBridgeSupportHeight\r\n    ) {\r\n      try {\r\n        this.setBlock(this.Foundation, supportY);\r\n        supportY.y -= 1;\r\n        supportHeight++;\r\n      } catch (e) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.renderSlice(sliceTemplate, this.qCurrentCoord, this.qCardinal, false);\r\n  }\r\n\r\n  // renders a single slice of road using the provided template. It uses the\r\n  // coordinate as the bottom center of the template slice and transforms\r\n  // based on the cardinal direction\r\n  private renderSlice(\r\n    sliceTemplate: Array<number>,\r\n    coord: Vector3,\r\n    cardinalDirection: number,\r\n    invertStairs: boolean = false\r\n  ) {\r\n    const rowOffset = 4;\r\n    const colOffset = -2;\r\n\r\n    Debug.trace(`Rendering slice at ${Debug.printCoordinate3(coord)}`);\r\n\r\n    // loop through each row in the slice template,\r\n    // we start at 5 above the starting coord and loop\r\n    // in reverse so we render the slice from the top\r\n    // left\r\n    for (let row = 0; row < 5; row++) {\r\n      // loop through each column in this row,\r\n      // we start at -2 so that we start rendering\r\n      // blocks to the left of the starting coord\r\n      // and center the slice at the bottom center block\r\n      for (let col = 0; col < 5; col++) {\r\n        // get the block int from the slice template\r\n        var blockIndex = sliceTemplate[row * 5 + col];\r\n\r\n        // resolve the block type based on the int\r\n        var block = this.blockInts[blockIndex];\r\n\r\n        // this block is a stair, set direction based on cardinal direction\r\n        if (blockIndex == 6) {\r\n          let stairCard = invertStairs ? RoadMaker.invertCardinalInteger(this.qCardinal) : this.qCardinal;\r\n          let stairBit = this.stairCardinalConversion[stairCard];\r\n          Debug.trace(`Setting stair bit for ${cardinalDirection} to ${stairBit}.`);\r\n          block = block.withState(this.StairDirectionStateName, stairBit);\r\n        }\r\n\r\n        // transform our slice based on the cardinal direction\r\n        switch (cardinalDirection) {\r\n          case 0: // west\r\n            this.setBlock(block, {\r\n              x: coord.x,\r\n              y: coord.y + (rowOffset - row),\r\n              z: coord.z + (colOffset + col),\r\n            });\r\n            break;\r\n          case 1: // south\r\n            this.setBlock(block, {\r\n              x: coord.x + (colOffset + col),\r\n              y: coord.y + (rowOffset - row),\r\n              z: coord.z,\r\n            });\r\n            break;\r\n          case 2: // east\r\n            this.setBlock(block, {\r\n              x: coord.x,\r\n              y: coord.y + (rowOffset - row),\r\n              z: coord.z - (colOffset + col),\r\n            });\r\n            break;\r\n          case 3: // north\r\n            this.setBlock(block, {\r\n              x: coord.x - (colOffset + col),\r\n              y: coord.y + (rowOffset - row),\r\n              z: coord.z,\r\n            });\r\n            break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // sets the block at the provided coordinates to the provided permutation\r\n  private setBlock(blockPerm: BlockPermutation, coord: Vector3) {\r\n    Debug.trace(`Setting block at ${Debug.printCoordinate3(coord)}.`);\r\n    this.getBlock(coord)?.setPermutation(blockPerm);\r\n  }\r\n\r\n  // gets the block at the provided coordinates\r\n  private getBlock(coord: Vector3) {\r\n    const overworld = world.getDimension(this.Dimension);\r\n    return overworld.getBlock(coord);\r\n  }\r\n\r\n  // gets a cardinally-aligned value expressed as an integer where\r\n  // 0 = West\r\n  // 1 = South\r\n  // 2 = East\r\n  // 3 = North\r\n  static getCardinalInteger(viewDirection: Vector3): number {\r\n    // figure out our 2d look angle\r\n    let lookAngle2d = Math.atan2(viewDirection.z, viewDirection.x);\r\n\r\n    // regulate our angle so it's positive\r\n    while (lookAngle2d < 0) {\r\n      lookAngle2d += Math.PI * 2;\r\n    }\r\n\r\n    // clamp our look angle to a cardinal coordinate\r\n    let cardinal = Math.round(lookAngle2d / (Math.PI / 2));\r\n\r\n    // clamp our look angle to 0 - 3\r\n    cardinal = cardinal > 3 ? 0 : cardinal;\r\n\r\n    Debug.trace(`Calculated cardinal direction at ${cardinal}.`);\r\n    return cardinal;\r\n  }\r\n\r\n  // inverts a cardinally-aligned value\r\n  static invertCardinalInteger(cardinal: number): number {\r\n    let inverse = cardinal + 2;\r\n    while (inverse > 3) {\r\n      inverse -= 4;\r\n    }\r\n    Debug.debug(`Inverting cardingal ${cardinal} to get ${inverse}`);\r\n    return inverse;\r\n  }\r\n}\r\n"],"sourceRoot":"../../../scripts/"}