{"version":3,"sources":["RoadMaker.ts"],"names":[],"mappings":"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","file":"../chonky_cabbage/scripts/RoadMaker.js","sourcesContent":["import {world, BlockPermutation, Vector3, Vector2, Block } from \"@minecraft/server\";\r\nimport Debug from \"./Debug\";\r\n\r\nexport enum WorkType {\r\n  None,\r\n  Road,\r\n  StairsUp,\r\n  StairsDown,\r\n  Corner\r\n}\r\n\r\n// For block definitions, see:\r\n// https://www.npmjs.com/package/@minecraft/vanilla-data?activeTab=code\r\nexport default class RoadMaker {\r\n\r\n  // these fields are used to keep track\r\n  // of where we are in the current work\r\n  // queue, allowing us to do long-running\r\n  // work across multiple ticks\r\n  private qInProgress: boolean = false;\r\n  private qStartCoord: Vector3 = {x:0,y:0,z:0};\r\n  private qCurrentCoord: Vector3 = {x:0,y:0,z:0};\r\n  private qViewDir: Vector3 = {x:0,y:0,z:0};\r\n  private qIteration: number = 0;\r\n  private qLength: number = 0;\r\n  private qCardinal: number = 0;\r\n  private qWorkType:WorkType = WorkType.None;\r\n\r\n  // max amount of road slices that will be processed in a\r\n  // single tick\r\n  private SlicesPerTick:number = 2;\r\n\r\n  // max distance bridge supports can go\r\n  private MaxBridgeSupportHeight:number = 64;\r\n\r\n  // name of the state that affects stair direction\r\n  private StairDirectionStateName:string = \"weirdo_direction\";\r\n\r\n  // these properties allow implementations to specify the specific\r\n  // road style\r\n  public Dimension =   \"overworld\";\r\n  public Air =         BlockPermutation.resolve(\"minecraft:air\");\r\n  public Dirt =        BlockPermutation.resolve(\"minecraft:dirt\");\r\n  public Foundation =  BlockPermutation.resolve(\"minecraft:cobblestone\");\r\n  public Wall =        BlockPermutation.resolve(\"minecraft:cobblestone_wall\");\r\n  public Path =        BlockPermutation.resolve(\"minecraft:bamboo_planks\");\r\n  public Post =        BlockPermutation.resolve(\"minecraft:bamboo_fence\");\r\n  public Light =       BlockPermutation.resolve(\"minecraft:lantern\");\r\n  public Stair =       BlockPermutation.resolve(\"minecraft:bamboo_stairs\");\r\n\r\n  // this maps block types to an integer index, allowing easy\r\n  // creation of visual templates\r\n  private blockInts:Array<BlockPermutation> =[\r\n    this.Air,         //0\r\n    this.Foundation,  //1\r\n    this.Wall,        //2\r\n    this.Path,        //3\r\n    this.Post,        //4\r\n    this.Light,       //5\r\n    this.Stair        //6\r\n  ]\r\n\r\n  // converts my cardinal directions into stair cardinal\r\n  // directions\r\n  private stairCardinalConversion:Array<number> = [\r\n    0, // cardinal west 0 = stair west 0\r\n    2, // cardinal south 1 = stair south 3\r\n    1, // cardinal east 2 = stair east 1\r\n    3  // cardinal north 3 = stair north 2\r\n  ];\r\n\r\n  // these are template 5x5 \"slices\" of a type of road. These use the\r\n  // int list above to resolve blocks when rendering the slice\r\n  private RoadNormal:Array<number> = [\r\n    0,0,0,0,0,\r\n    0,0,0,0,0,\r\n    0,0,0,0,0,\r\n    2,0,0,0,2,\r\n    1,3,3,3,1];\r\n\r\n  private RoadNormalLit:Array<number> = [\r\n    5,0,0,0,5,\r\n    4,0,0,0,4,\r\n    4,0,0,0,4,\r\n    2,0,0,0,2,\r\n    1,3,3,3,1];\r\n  \r\n  private RoadTunnel:Array<number> = [\r\n    1,3,3,3,1,\r\n    1,0,0,0,1,\r\n    1,0,0,0,1,\r\n    1,0,0,0,1,\r\n    1,3,3,3,1];\r\n\r\n  private RoadTunnelLit:Array<number> = [\r\n    1,3,3,3,1,\r\n    1,0,0,0,1,\r\n    5,0,0,0,5,\r\n    1,0,0,0,1,\r\n    1,3,3,3,1];\r\n\r\n  private RoadStairNormal:Array<number> = [\r\n    0,0,0,0,0,\r\n    0,0,0,0,0,\r\n    2,0,0,0,2,\r\n    1,6,6,6,1,\r\n    1,1,1,1,1];\r\n\r\n    private RoadStairLit:Array<number> = [\r\n    0,0,0,0,0,\r\n    5,0,0,0,5,\r\n    2,0,0,0,2,\r\n    1,6,6,6,1,\r\n    1,1,1,1,1];\r\n\r\n\r\n  constructor()\r\n  {\r\n    Debug.debug(\"RoadMaker has been created...\");\r\n  }\r\n\r\n  // returns whether a road is being built\r\n  isRoadInProgress() :boolean\r\n  {\r\n    return this.qInProgress;\r\n  }\r\n\r\n  // returns where the road building is occuring so progress\r\n  // can be traced\r\n  getWorkPoint():Vector3\r\n  {\r\n    return this.qCurrentCoord;\r\n  }\r\n\r\n  cancelRoad() {\r\n    this.qInProgress = false;\r\n    this.qStartCoord = {x:0,y:0,z:0};\r\n    this.qCurrentCoord = {x:0,y:0,z:0};\r\n    this.qViewDir = {x:0,y:0,z:0};\r\n    this.qIteration = 0;\r\n    this.qLength = 0;\r\n    this.qCardinal = 0;\r\n    this.qWorkType = WorkType.None;\r\n  }\r\n\r\n\r\n  tryAssignBlockType(blockKey:string, blockType:string)\r\n  {\r\n    try {\r\n      blockType = \"minecraft:\"+blockType;\r\n      let block = BlockPermutation.resolve(blockType);\r\n      switch(blockKey){\r\n        case \"Foundation\":\r\n          this.Foundation = block;\r\n          break;\r\n        case \"Wall\":\r\n          this.Wall = block;\r\n          break;\r\n        case \"Path\":\r\n          this.Path = block;\r\n          break;\r\n        case \"Post\":\r\n          this.Post = block;\r\n          break;\r\n        case \"Light\":\r\n          this.Light = block;\r\n          break;\r\n        case \"Stair\":\r\n          this.Stair = block;\r\n          break;\r\n      }\r\n\r\n      // reset array\r\n      this.blockInts =[\r\n        this.Air,         //0\r\n        this.Foundation,  //1\r\n        this.Wall,        //2\r\n        this.Path,        //3\r\n        this.Post,        //4\r\n        this.Light,       //5\r\n        this.Stair        //6\r\n      ];\r\n      Debug.info(`Set ${blockKey} to ${blockType}`);\r\n    }\r\n    catch(e)\r\n    {\r\n      Debug.error(`Couldn't locate block type: ${blockType}`);\r\n      return;\r\n    }\r\n  }\r\n\r\n  // starts building a new road at the provided coordinates, in the provided view direction\r\n  // of the provided length.\r\n  startNewRoad(startCoord: Vector3, viewDirection: Vector3, length: number, type:WorkType = WorkType.Road)\r\n  {\r\n    // EARLY OUT: road already in progress\r\n    if(this.qInProgress === true)\r\n    {\r\n      Debug.warn(\"Cannot start a new road until the road in progress has completed.\");\r\n      return;\r\n    }\r\n\r\n    this.qInProgress = true;\r\n    this.qCardinal = RoadMaker.getCardinalInteger(viewDirection);\r\n    this.qIteration = 0;\r\n    this.qStartCoord = startCoord;\r\n    this.qViewDir = viewDirection;\r\n    this.qLength = length;\r\n    this.qWorkType = type;\r\n\r\n    // copy our provided vector into an object we can walk through\r\n    this.qCurrentCoord = {\r\n      x: startCoord.x,\r\n      y: startCoord.y,\r\n      z: startCoord.z\r\n    };\r\n\r\n    Debug.debug(`Starting road(${length}) at ${Debug.printCoordinate3(startCoord)} and direction ${this.qCardinal}.`);\r\n  }\r\n\r\n  // builds a road segment for this tick, updates the inProgress status\r\n  // if the road has been completed\r\n  tryTickIteration() {\r\n\r\n    // EARLY OUT: nothing in progress\r\n    if(this.qInProgress === false) {\r\n      return;\r\n    }\r\n\r\n    Debug.debug(`Building road: ${this.qIteration}/${this.qLength}`);\r\n\r\n    let tickMaxIteration = this.qIteration + this.SlicesPerTick;\r\n    let thisTickEnd = Math.min(this.qLength, tickMaxIteration);\r\n\r\n    // loop through our length, creating strips of road depending on our cardinal alignment\r\n    // we are 1 indexed so the road starts just in front of the player, otherwise it\r\n    // won't render correctly\r\n    for(let i = this.qIteration + 1; i <= thisTickEnd; i++)\r\n    {\r\n      switch(this.qWorkType) {\r\n        case WorkType.Road :\r\n          this.makeRoad(i);\r\n          break;\r\n        case WorkType.StairsUp:\r\n          this.makeStair(i, +1);\r\n          break;\r\n        case WorkType.StairsDown:\r\n          this.makeStair(i, -1);\r\n          break;\r\n      }\r\n    }\r\n\r\n    this.qIteration = thisTickEnd;\r\n    if(thisTickEnd == this.qLength)\r\n    {\r\n      this.cancelRoad();\r\n    }\r\n  }\r\n\r\n  private makeStair(i:number, dir:number = +1) {\r\n    let drawLights = i % 8 === 0;\r\n    let drawSupports = i % 16 === 0;\r\n\r\n    // dynamically set our length-walking coordinate\r\n    let coordToChange: keyof Vector3 = this.qCardinal % 2 == 0 ? \"x\" : \"z\";\r\n    let directionModifier = this.qCardinal > 1 ? -1 : 1;\r\n    this.qCurrentCoord[coordToChange] = this.qStartCoord[coordToChange] + (i * directionModifier);\r\n\r\n    let sliceTemplate = drawLights ? this.RoadStairLit : this.RoadStairNormal;\r\n\r\n    if(dir > 0)\r\n    {\r\n      this.renderSlice(sliceTemplate, this.qCurrentCoord, this.qCardinal, false);\r\n      this.qCurrentCoord.y++;\r\n    }\r\n    else {\r\n      this.qCurrentCoord.y--;\r\n      this.renderSlice(sliceTemplate, this.qCurrentCoord, this.qCardinal, true);\r\n    }\r\n  }\r\n\r\n  private makeRoad(i:number) {\r\n    let drawLights = i % 8 === 0;\r\n    let drawSupports = i % 16 === 0;\r\n\r\n    // dynamically set our length-walking coordinate\r\n    let coordToChange: keyof Vector3 = this.qCardinal % 2 == 0 ? \"x\" : \"z\";\r\n    let directionModifier = this.qCardinal > 1 ? -1 : 1;\r\n    this.qCurrentCoord[coordToChange] = this.qStartCoord[coordToChange] + (i * directionModifier);\r\n\r\n    let sliceTemplate = drawLights ? this.RoadNormalLit : this.RoadNormal;\r\n\r\n    // if the top block is not air, we should tunnel\r\n    if(this.getBlock({x: this.qCurrentCoord.x, y: this.qCurrentCoord.y + 3, z: this.qCurrentCoord.z})?.permutation !== this.Air)\r\n    {\r\n      sliceTemplate = drawLights ? this.RoadTunnelLit : this.RoadTunnel;\r\n    }\r\n\r\n    // generate supports\r\n    let supportY = {x: this.qCurrentCoord.x, y: this.qCurrentCoord.y - 1, z: this.qCurrentCoord.z}\r\n    let supportHeight = 0;\r\n    while(drawSupports && this.getBlock(supportY)?.permutation !== this.Dirt && supportHeight < this.MaxBridgeSupportHeight)\r\n    {\r\n      try{\r\n        this.setBlock(this.Foundation, supportY);\r\n        supportY.y -= 1;\r\n        supportHeight++;\r\n      }\r\n      catch(e)\r\n      {\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.renderSlice(sliceTemplate, this.qCurrentCoord, this.qCardinal, false);\r\n  }\r\n\r\n  // renders a single slice of road using the provided template. It uses the\r\n  // coordinate as the bottom center of the template slice and transforms\r\n  // based on the cardinal direction\r\n  private renderSlice(sliceTemplate: Array<number>, coord:Vector3, cardinalDirection: number, invertStairs: boolean = false)\r\n  {\r\n    const rowOffset = 4;\r\n    const colOffset = -2;\r\n\r\n    Debug.trace(`Rendering slice at ${Debug.printCoordinate3(coord)}`);\r\n\r\n    // loop through each row in the slice template,\r\n    // we start at 5 above the starting coord and loop\r\n    // in reverse so we render the slice from the top\r\n    // left\r\n    for(let row = 0; row < 5; row++)\r\n    {\r\n      // loop through each column in this row,\r\n      // we start at -2 so that we start rendering\r\n      // blocks to the left of the starting coord\r\n      // and center the slice at the bottom center block\r\n      for(let col = 0; col < 5; col++)\r\n      {\r\n        // get the block int from the slice template\r\n        var blockIndex = sliceTemplate[(row * 5) + col];\r\n\r\n        // resolve the block type based on the int\r\n        var block = this.blockInts[blockIndex];\r\n\r\n        // this block is a stair, set direction based on cardinal direction\r\n        if(blockIndex == 6)\r\n        {\r\n          let stairCard = invertStairs ? RoadMaker.invertCardinalInteger(this.qCardinal) : this.qCardinal;\r\n          let stairBit = this.stairCardinalConversion[stairCard];\r\n          Debug.trace(`Setting stair bit for ${cardinalDirection} to ${stairBit}.`);\r\n          block = block.withState(this.StairDirectionStateName, stairBit);\r\n        }\r\n\r\n        // transform our slice based on the cardinal direction\r\n        switch(cardinalDirection)\r\n        {\r\n          case 0: // west\r\n            this.setBlock(block, {\r\n              x: coord.x,\r\n              y: coord.y + (rowOffset - row),\r\n              z: coord.z + (colOffset + col)\r\n            });\r\n            break;\r\n          case 1: // south\r\n            this.setBlock(block, {\r\n              x: coord.x + (colOffset + col),\r\n              y: coord.y + (rowOffset - row),\r\n              z: coord.z\r\n            });\r\n            break;\r\n          case 2: // east\r\n            this.setBlock(block, {\r\n              x: coord.x,\r\n              y: coord.y + (rowOffset - row),\r\n              z: coord.z - (colOffset + col)\r\n            });\r\n            break;\r\n          case 3: // north\r\n            this.setBlock(block, {\r\n              x: coord.x - (colOffset + col),\r\n              y: coord.y + (rowOffset - row),\r\n              z: coord.z\r\n            });\r\n            break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // sets the block at the provided coordinates to the provided permutation\r\n  private setBlock(blockPerm:BlockPermutation, coord:Vector3) {\r\n    Debug.trace(`Setting block at ${Debug.printCoordinate3(coord)}.`);\r\n    this.getBlock(coord)?.setPermutation(blockPerm);\r\n  }\r\n\r\n  // gets the block at the provided coordinates\r\n  private getBlock(coord: Vector3)\r\n  {\r\n    const overworld = world.getDimension(this.Dimension);\r\n    return overworld.getBlock(coord)\r\n  }\r\n\r\n  // gets a cardinally-aligned value expressed as an integer where\r\n  // 0 = West\r\n  // 1 = South\r\n  // 2 = East\r\n  // 3 = North\r\n  static getCardinalInteger(viewDirection:Vector3): number\r\n  {\r\n    // figure out our 2d look angle\r\n    let lookAngle2d = Math.atan2(viewDirection.z, viewDirection.x);\r\n\r\n    // regulate our angle so it's positive\r\n    while(lookAngle2d < 0)\r\n    {\r\n      lookAngle2d += (Math.PI * 2);\r\n    }\r\n\r\n    // clamp our look angle to a cardinal coordinate\r\n    let cardinal = Math.round(lookAngle2d / (Math.PI / 2));\r\n\r\n    // clamp our look angle to 0 - 3\r\n    cardinal = cardinal > 3 ? 0 : cardinal;\r\n\r\n    Debug.trace(`Calculated cardinal direction at ${cardinal}.`);\r\n    return cardinal;\r\n  }\r\n\r\n  // inverts a cardinally-aligned value\r\n  static invertCardinalInteger(cardinal: number): number\r\n  {\r\n    let inverse = cardinal + 2;\r\n    while(inverse > 3)\r\n    {\r\n      inverse -= 4\r\n    }\r\n    Debug.debug(`Inverting cardingal ${cardinal} to get ${inverse}`);\r\n    return inverse;\r\n  }\r\n}"],"sourceRoot":"../../../scripts/"}